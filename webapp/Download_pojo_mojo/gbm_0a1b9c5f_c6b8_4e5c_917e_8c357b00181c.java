/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2021-10-04T16:37:16.436+02:00
  3.32.1.7
  
  Standalone prediction code with sample test data for GBMModel named gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.1.150:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.1.150:54321/3/Models.java/gbm-0a1b9c5f-c6b8-4e5c-917e-8c357b00181c > gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c", algorithm="gbm")
public class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Regression; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 11; }
  public int nclasses() { return 1; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* fixed acidity */ null,
    /* volatile acidity */ null,
    /* citric acid */ null,
    /* residual sugar */ null,
    /* chlorides */ null,
    /* free sulfur dioxide */ null,
    /* total sulfur dioxide */ null,
    /* density */ null,
    /* pH */ null,
    /* sulphates */ null,
    /* alcohol */ null,
    /* quality */ null
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {1.0};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {1.0};

  public gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c() { super(NAMES,DOMAINS,"quality"); }
  public String getUUID() { return Long.toString(4439182421551224544L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_0.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_1.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_2.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_3.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_4.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_5.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_6.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_7.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_8.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_9.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_10.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_11.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_12.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_13.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_14.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_15.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_16.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_17.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_18.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_19.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_20.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_21.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_22.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_23.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_24.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_25.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_26.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_27.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_28.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_29.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_30.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_31.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_32.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_33.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_34.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_35.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_36.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_37.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_38.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_39.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_40.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_41.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_42.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_43.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_44.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_45.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_46.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_47.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_48.score0(data,preds);
    gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_49.score0(data,preds);
    preds[0] += 5.6360225140712945;
    preds[0] = preds[0];
    return preds;
  }
}
// The class representing training column names
class NamesHolder_gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c implements java.io.Serializable {
  public static final String[] VALUES = new String[11];
  static {
    NamesHolder_gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_0.fill(VALUES);
  }
  static final class NamesHolder_gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "fixed acidity";
      sa[1] = "volatile acidity";
      sa[2] = "citric acid";
      sa[3] = "residual sugar";
      sa[4] = "chlorides";
      sa[5] = "free sulfur dioxide";
      sa[6] = "total sulfur dioxide";
      sa[7] = "density";
      sa[8] = "pH";
      sa[9] = "sulphates";
      sa[10] = "alcohol";
    }
  }
}

class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_0_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.523291f ? 
         (data[9 /* sulphates */] < 0.5746289f ? 
             (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.74726564f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 9.75f ? 
                     (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 9.25f ? 
                        -0.050230157f : 
                        -0.07171036f) : 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.5889062f ? 
                        -0.010661075f : 
                        -0.043994408f)) : 
                 (data[2 /* citric acid */] < 0.05484375f ? 
                     (data[3 /* residual sugar */] < 2.175f ? 
                        -0.14542043f : 
                        -0.08178407f) : 
                     (data[4 /* chlorides */] < 0.0796875f ? 
                        -0.027887965f : 
                        -0.06730595f))) : 
             (data[1 /* volatile acidity */] < 0.40566406f ? 
                 (data[9 /* sulphates */] < 0.65765625f ? 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.3990624f ? 
                        -0.03283302f : 
                        0.009731082f) : 
                     (data[10 /* alcohol */] < 9.745313f ? 
                        0.00750886f : 
                        0.055363264f)) : 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 65.71875f ? 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.5415626f ? 
                        -0.009886035f : 
                        -0.06026892f) : 
                     (data[10 /* alcohol */] < 9.45f ? 
                        -0.063602254f : 
                        -0.034024786f)))) : 
         (data[9 /* sulphates */] < 0.64638674f ? 
             (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 1.0153906f ? 
                 (data[1 /* volatile acidity */] < 0.49413696f ? 
                     (data[10 /* alcohol */] < 11.541016f ? 
                        0.010907552f : 
                        0.06870544f) : 
                     (data[5 /* free sulfur dioxide */] < 8.625f ? 
                        -0.03651892f : 
                        0.008846728f)) : 
                -0.16360225f) : 
             (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.544043f ? 
                 (data[1 /* volatile acidity */] < 0.3963867f ? 
                     (data[8 /* pH */] < 3.2525f ? 
                        0.1169533f : 
                        0.043177407f) : 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.0943125f ? 
                        0.03753411f : 
                        -0.0027326867f)) : 
                 (data[9 /* sulphates */] < 0.6858594f ? 
                     (data[5 /* free sulfur dioxide */] < 7.125f ? 
                        0.09473108f : 
                        0.036397748f) : 
                     (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 18.375f ? 
                        0.12439775f : 
                        0.07998749f)))));
    return pred;
  } // constant pool size = 114B, number of visited nodes = 28, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_1_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.523291f ? 
         (data[9 /* sulphates */] < 0.5746289f ? 
             (data[9 /* sulphates */] < 0.52493864f ? 
                 (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.8708594f ? 
                     (data[2 /* citric acid */] < 0.04875f ? 
                        -0.06815493f : 
                        -0.045734122f) : 
                    -0.10555406f) : 
                 (data[7 /* density */] < 0.99696064f ? 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.1484375f ? 
                        -0.024866737f : 
                        0.03227867f) : 
                     (data[3 /* residual sugar */] < 2.15f ? 
                        -0.07450593f : 
                        -0.043757983f))) : 
             (data[1 /* volatile acidity */] < 0.33527344f ? 
                 (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 11.55f ? 
                     (data[10 /* alcohol */] < 9.745313f ? 
                        -0.00934601f : 
                        0.046537466f) : 
                    0.1027756f) : 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 82.94531f ? 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 9.975f ? 
                        -0.021257523f : 
                        0.0061094523f) : 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 105.93201f ? 
                        -0.03528436f : 
                        -0.057179086f)))) : 
         (data[9 /* sulphates */] < 0.58441406f ? 
             (data[1 /* volatile acidity */] < 0.3851953f ? 
                 (Double.isNaN(data[7]) || data[7 /* density */] < 0.9955307f ? 
                     (data[6 /* total sulfur dioxide */] < 15.8125f ? 
                        0.09075042f : 
                        0.05271271f) : 
                    0.010988511f) : 
                 (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.9359256f ? 
                     (data[5 /* free sulfur dioxide */] < 5.4609375f ? 
                        -0.06540525f : 
                        -0.005162276f) : 
                    -0.11094561f)) : 
             (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.544043f ? 
                 (data[1 /* volatile acidity */] < 0.39595702f ? 
                     (data[8 /* pH */] < 3.2659376f ? 
                        0.09368408f : 
                        0.032450337f) : 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.81165373f ? 
                        0.025333744f : 
                        -0.044949695f)) : 
                 (data[6 /* total sulfur dioxide */] < 19.664062f ? 
                     (data[8 /* pH */] < 3.2375f ? 
                        0.13510767f : 
                        0.100584984f) : 
                     (data[9 /* sulphates */] < 0.6954687f ? 
                        0.037270445f : 
                        0.09436285f)))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 27, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_2_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.523291f ? 
         (data[9 /* sulphates */] < 0.5746289f ? 
             (data[9 /* sulphates */] < 0.52493864f ? 
                 (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.8134375f ? 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 9.644531f ? 
                        -0.05216132f : 
                        -0.031092083f) : 
                     (data[8 /* pH */] < 3.2742188f ? 
                        -0.049081143f : 
                        -0.10943019f)) : 
                 (data[7 /* density */] < 0.99704725f ? 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.347656f ? 
                        -0.020369489f : 
                        0.04362994f) : 
                     (data[3 /* residual sugar */] < 2.15f ? 
                        -0.0740628f : 
                        -0.039196923f))) : 
             (data[1 /* volatile acidity */] < 0.40566406f ? 
                 (data[9 /* sulphates */] < 0.65765625f ? 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.3990624f ? 
                        -0.029321218f : 
                        0.009884437f) : 
                     (data[10 /* alcohol */] < 9.745313f ? 
                        0.007469101f : 
                        0.04653965f)) : 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 9.8519535f ? 
                     (data[6 /* total sulfur dioxide */] < 38.15625f ? 
                        -0.0134295365f : 
                        -0.038927652f) : 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.4228125f ? 
                        0.006696462f : 
                        -0.03953498f)))) : 
         (data[9 /* sulphates */] < 0.6349707f ? 
             (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 1.0153906f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.448828f ? 
                     (data[5 /* free sulfur dioxide */] < 8.625f ? 
                        -0.031006891f : 
                        0.006231526f) : 
                     (data[0 /* fixed acidity */] < 6.56875f ? 
                        -0.0018643347f : 
                        0.05040662f)) : 
                -0.13746737f) : 
             (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.544043f ? 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 85.15625f ? 
                     (data[1 /* volatile acidity */] < 0.39007813f ? 
                        0.062769055f : 
                        0.024652237f) : 
                    -0.04777396f) : 
                 (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 11.345312f ? 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.553906f ? 
                        0.07832211f : 
                        0.1113063f) : 
                    0.027307862f))));
    return pred;
  } // constant pool size = 106B, number of visited nodes = 26, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_3_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.523291f ? 
         (data[1 /* volatile acidity */] < 0.5477344f ? 
             (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.64638674f ? 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 99.24219f ? 
                     (data[9 /* sulphates */] < 0.52515626f ? 
                        -0.033604488f : 
                        -0.010860661f) : 
                     (data[2 /* citric acid */] < 0.2559375f ? 
                        -0.031227246f : 
                        -0.05016892f)) : 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 58.9375f ? 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.099875f ? 
                        0.037812248f : 
                        -0.016297577f) : 
                     (data[1 /* volatile acidity */] < 0.36f ? 
                        0.026646523f : 
                        -0.038713373f))) : 
             (data[9 /* sulphates */] < 0.5354883f ? 
                 (data[8 /* pH */] < 3.2240624f ? 
                     (data[2 /* citric acid */] < 0.196875f ? 
                        -0.01272899f : 
                        -0.041865848f) : 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.7764062f ? 
                        -0.048136972f : 
                        -0.07591712f)) : 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 9.8519535f ? 
                     (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 9.215625f ? 
                        -0.0299902f : 
                        -0.059818096f) : 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.5426562f ? 
                        -0.0037760106f : 
                        -0.06835433f)))) : 
         (data[9 /* sulphates */] < 0.58441406f ? 
             (data[1 /* volatile acidity */] < 0.3851953f ? 
                 (Double.isNaN(data[7]) || data[7 /* density */] < 0.9955307f ? 
                     (data[6 /* total sulfur dioxide */] < 15.8125f ? 
                        0.07910567f : 
                        0.044008203f) : 
                    0.008552888f) : 
                 (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.9359256f ? 
                     (data[5 /* free sulfur dioxide */] < 5.4609375f ? 
                        -0.057244275f : 
                        -0.005818972f) : 
                    -0.091262385f)) : 
             (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.544043f ? 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 61.898438f ? 
                     (data[1 /* volatile acidity */] < 0.39875f ? 
                        0.057831965f : 
                        0.02097507f) : 
                     (data[8 /* pH */] < 3.3428125f ? 
                        0.020017236f : 
                        -0.038592625f)) : 
                 (data[6 /* total sulfur dioxide */] < 19.664062f ? 
                     (data[4 /* chlorides */] < 0.0676875f ? 
                        0.07235726f : 
                        0.1079919f) : 
                     (data[9 /* sulphates */] < 0.725f ? 
                        0.031850617f : 
                        0.078629985f)))));
    return pred;
  } // constant pool size = 118B, number of visited nodes = 29, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_4_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.151709f ? 
         (data[9 /* sulphates */] < 0.5746289f ? 
             (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.852148f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.056303f ? 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.11559375f ? 
                        -0.034040235f : 
                        -0.06909457f) : 
                     (data[0 /* fixed acidity */] < 7.4640627f ? 
                        -0.037081424f : 
                        0.006465561f)) : 
                 (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.12492187f ? 
                    -0.100058384f : 
                    -0.05143935f)) : 
             (data[1 /* volatile acidity */] < 0.36046875f ? 
                 (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 10.651172f ? 
                     (data[9 /* sulphates */] < 0.69375f ? 
                        -0.016330775f : 
                        0.03274841f) : 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.551562f ? 
                        0.04871474f : 
                        0.100300945f)) : 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 9.971484f ? 
                     (data[6 /* total sulfur dioxide */] < 45.046875f ? 
                        -0.008403558f : 
                        -0.031822413f) : 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 76.05469f ? 
                        0.0100620445f : 
                        -0.04205872f)))) : 
         (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.6757422f ? 
             (Double.isNaN(data[8]) || data[8 /* pH */] < 3.4259374f ? 
                 (Double.isNaN(data[8]) || data[8 /* pH */] < 3.2752051f ? 
                     (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 10.5703125f ? 
                        0.060371634f : 
                        0.0136840055f) : 
                     (data[4 /* chlorides */] < 0.06075f ? 
                        -0.010952175f : 
                        0.03435509f)) : 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.146875f ? 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.7728906f ? 
                        -0.013453501f : 
                        -0.05997175f) : 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.9937438f ? 
                        -0.0021488867f : 
                        0.056622494f))) : 
             (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.450195f ? 
                 (data[4 /* chlorides */] < 0.055414062f ? 
                    0.001099968f : 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 37.859375f ? 
                        0.06854309f : 
                        0.045019154f)) : 
                 (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 20.4375f ? 
                     (data[0 /* fixed acidity */] < 7.99375f ? 
                        0.1247213f : 
                        0.087877266f) : 
                    0.038285244f))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 27, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_5_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.450293f ? 
         (data[1 /* volatile acidity */] < 0.5477344f ? 
             (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.64638674f ? 
                 (data[5 /* free sulfur dioxide */] < 13.480469f ? 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.5250391f ? 
                        -0.013566495f : 
                        0.028367024f) : 
                     (data[8 /* pH */] < 3.3175f ? 
                        -0.036673583f : 
                        -0.014739025f)) : 
                 (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.0980625f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 70.078125f ? 
                        0.02880017f : 
                        -0.028614927f) : 
                     (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 20.828125f ? 
                        -0.005447919f : 
                        -0.063643746f))) : 
             (data[9 /* sulphates */] < 0.5354883f ? 
                 (data[8 /* pH */] < 3.224375f ? 
                     (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 8.451563f ? 
                        -0.032278847f : 
                        -0.0044514467f) : 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 66.5f ? 
                        -0.055376396f : 
                        -0.030345025f)) : 
                 (data[3 /* residual sugar */] < 1.8679688f ? 
                     (data[1 /* volatile acidity */] < 0.606875f ? 
                        -0.01814602f : 
                        -0.050716184f) : 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.3375f ? 
                        -0.019312844f : 
                        0.018445216f)))) : 
         (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.86996096f ? 
             (data[9 /* sulphates */] < 0.6357812f ? 
                 (data[1 /* volatile acidity */] < 0.31498048f ? 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.275f ? 
                        0.064700924f : 
                        0.004094605f) : 
                     (data[4 /* chlorides */] < 0.0585625f ? 
                        -0.03220347f : 
                        0.010998335f)) : 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.25625f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 105.9375f ? 
                        0.028018562f : 
                        -0.053777337f) : 
                     (data[7 /* density */] < 0.9952781f ? 
                        0.07096006f : 
                        0.04515127f))) : 
             (data[3 /* residual sugar */] < 2.0425782f ? 
                -0.01958249f : 
                -0.10245161f)));
    return pred;
  } // constant pool size = 102B, number of visited nodes = 25, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_6_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.151709f ? 
         (data[9 /* sulphates */] < 0.5746289f ? 
             (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.852148f ? 
                 (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.7872656f ? 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 9.745313f ? 
                        -0.030801758f : 
                        -0.00875892f) : 
                     (data[0 /* fixed acidity */] < 7.5289063f ? 
                        -0.080606006f : 
                        -0.029089646f)) : 
                 (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.12492187f ? 
                    -0.08773149f : 
                    -0.046296082f)) : 
             (data[1 /* volatile acidity */] < 0.36046875f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.751953f ? 
                     (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 11.621875f ? 
                        0.0041523273f : 
                        0.06313867f) : 
                     (data[2 /* citric acid */] < 0.415f ? 
                        0.017484695f : 
                        0.08008174f)) : 
                 (data[10 /* alcohol */] < 9.855469f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 100.171875f ? 
                        -0.014016944f : 
                        -0.04262396f) : 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.6795313f ? 
                        0.008738328f : 
                        -0.02262169f)))) : 
         (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.6757422f ? 
             (Double.isNaN(data[8]) || data[8 /* pH */] < 3.4259374f ? 
                 (data[6 /* total sulfur dioxide */] < 14.84375f ? 
                     (data[4 /* chlorides */] < 0.0645f ? 
                        0.013084325f : 
                        0.062388178f) : 
                     (data[10 /* alcohol */] < 11.559375f ? 
                        0.0013798544f : 
                        0.03245792f)) : 
                 (data[10 /* alcohol */] < 11.453125f ? 
                     (data[2 /* citric acid */] < 0.01546875f ? 
                        0.0044275806f : 
                        -0.069825664f) : 
                     (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 2.309375f ? 
                        0.02199987f : 
                        -0.016851453f))) : 
             (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.09247266f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.442968f ? 
                     (data[4 /* chlorides */] < 0.06053125f ? 
                        0.009044314f : 
                        0.057754934f) : 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 46.1875f ? 
                        0.0926332f : 
                        0.0596466f)) : 
                 (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.51128906f ? 
                    0.009375944f : 
                    0.04472267f))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 27, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_7_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.151709f ? 
         (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.64638674f ? 
             (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.6503125f ? 
                 (data[2 /* citric acid */] < 0.024375f ? 
                     (data[0 /* fixed acidity */] < 6.71875f ? 
                        -0.038725898f : 
                        0.030825026f) : 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 9.75f ? 
                        -0.023968017f : 
                        -0.005206166f)) : 
                 (data[6 /* total sulfur dioxide */] < 14.421875f ? 
                     (data[10 /* alcohol */] < 9.869532f ? 
                        -0.037603237f : 
                        -0.09337457f) : 
                     (data[3 /* residual sugar */] < 1.5234375f ? 
                        -0.06835814f : 
                        -0.024629662f))) : 
             (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 50.515625f ? 
                 (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.09619531f ? 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.54796875f ? 
                        0.036178626f : 
                        -0.0010858508f) : 
                     (data[5 /* free sulfur dioxide */] < 8.4765625f ? 
                        0.011869063f : 
                        -0.04358096f)) : 
                 (data[1 /* volatile acidity */] < 0.36398438f ? 
                     (data[0 /* fixed acidity */] < 7.9390626f ? 
                        -0.03146745f : 
                        0.03307788f) : 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.09559375f ? 
                        -0.014359697f : 
                        -0.034105185f)))) : 
         (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.6757422f ? 
             (data[0 /* fixed acidity */] < 6.5642576f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.146875f ? 
                     (data[6 /* total sulfur dioxide */] < 26.0625f ? 
                        -0.058421593f : 
                        -0.007646773f) : 
                     (data[2 /* citric acid */] < 0.04125f ? 
                        0.04235984f : 
                        -0.010563344f)) : 
                 (data[10 /* alcohol */] < 11.453125f ? 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.68226564f ? 
                        0.0151184425f : 
                        -0.03603404f) : 
                     (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 24.9375f ? 
                        0.029622085f : 
                        0.07676911f))) : 
             (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.09417578f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.442968f ? 
                     (data[4 /* chlorides */] < 0.060515624f ? 
                        0.008139896f : 
                        0.051627405f) : 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 46.1875f ? 
                        0.08336987f : 
                        0.053681936f)) : 
                 (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 12.9375f ? 
                    0.03939894f : 
                    -0.0015742234f))));
    return pred;
  } // constant pool size = 118B, number of visited nodes = 29, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_8_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.523291f ? 
         (data[1 /* volatile acidity */] < 0.5477344f ? 
             (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.64638674f ? 
                 (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.50507814f ? 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 9.644531f ? 
                        -0.02013498f : 
                        -0.0067219706f) : 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 39.6875f ? 
                        0.014599837f : 
                        -0.017166616f)) : 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 58.9375f ? 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.135125f ? 
                        0.024126878f : 
                        -0.026132954f) : 
                     (data[1 /* volatile acidity */] < 0.36f ? 
                        0.018660221f : 
                        -0.026808664f))) : 
             (data[0 /* fixed acidity */] < 6.7578125f ? 
                 (data[5 /* free sulfur dioxide */] < 7.3164062f ? 
                    -0.101541415f : 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.5480468f ? 
                        -0.022088425f : 
                        -0.04974053f)) : 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 9.950391f ? 
                     (data[9 /* sulphates */] < 0.51f ? 
                        -0.032467626f : 
                        -0.02012427f) : 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.6578125f ? 
                        0.008362124f : 
                        -0.018434957f)))) : 
         (data[9 /* sulphates */] < 0.58441406f ? 
             (data[1 /* volatile acidity */] < 0.3851953f ? 
                 (Double.isNaN(data[7]) || data[7 /* density */] < 0.9956494f ? 
                     (data[6 /* total sulfur dioxide */] < 15.8125f ? 
                        0.059013274f : 
                        0.026029553f) : 
                    -0.0050414563f) : 
                 (data[5 /* free sulfur dioxide */] < 8.46875f ? 
                     (data[3 /* residual sugar */] < 2.075f ? 
                        -7.834126E-4f : 
                        -0.054217525f) : 
                     (data[5 /* free sulfur dioxide */] < 10.545166f ? 
                        0.042403426f : 
                        -0.007745482f))) : 
             (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.544043f ? 
                 (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.09475f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 49.34375f ? 
                        0.033415984f : 
                        -0.0017644396f) : 
                     (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.7503125f ? 
                        -0.021242581f : 
                        0.027457979f)) : 
                 (data[6 /* total sulfur dioxide */] < 19.664062f ? 
                     (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.7334375f ? 
                        0.07778994f : 
                        0.046953555f) : 
                     (data[9 /* sulphates */] < 0.725f ? 
                        0.017406955f : 
                        0.046935327f)))));
    return pred;
  } // constant pool size = 118B, number of visited nodes = 29, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_9_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.250097f ? 
         (data[1 /* volatile acidity */] < 0.40515625f ? 
             (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.7148828f ? 
                 (data[6 /* total sulfur dioxide */] < 17.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.99764603f ? 
                        0.057658248f : 
                        -0.014452473f) : 
                     (data[1 /* volatile acidity */] < 0.25f ? 
                        -0.047507808f : 
                        -0.0048402343f)) : 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 56.6875f ? 
                     (data[10 /* alcohol */] < 9.646875f ? 
                        0.0047817277f : 
                        0.045318443f) : 
                     (data[0 /* fixed acidity */] < 8.116406f ? 
                        -0.042921916f : 
                        0.009950949f))) : 
             (data[9 /* sulphates */] < 0.5550586f ? 
                 (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.8121875f ? 
                     (data[10 /* alcohol */] < 9.1375f ? 
                        -0.05635451f : 
                        -0.019622274f) : 
                     (data[0 /* fixed acidity */] < 7.5289063f ? 
                        -0.07704576f : 
                        -0.027876066f)) : 
                 (data[10 /* alcohol */] < 9.854688f ? 
                     (data[6 /* total sulfur dioxide */] < 38.59375f ? 
                        -0.0029199505f : 
                        -0.02346787f) : 
                     (data[6 /* total sulfur dioxide */] < 15.3125f ? 
                        -0.031123487f : 
                        0.004048031f)))) : 
         (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.6855273f ? 
             (data[0 /* fixed acidity */] < 6.5642576f ? 
                 (data[5 /* free sulfur dioxide */] < 13.464844f ? 
                     (data[4 /* chlorides */] < 0.059875f ? 
                        -0.059580967f : 
                        0.008803781f) : 
                     (data[1 /* volatile acidity */] < 0.48234376f ? 
                        0.03482927f : 
                        -0.0024531386f)) : 
                 (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 31.457031f ? 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.74125f ? 
                        0.022880245f : 
                        -0.023116576f) : 
                    0.07374551f)) : 
             (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 18.46875f ? 
                 (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 9.626562f ? 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.36f ? 
                        0.073964186f : 
                        0.045464102f) : 
                     (data[3 /* residual sugar */] < 2.4460938f ? 
                        -0.0035427967f : 
                        0.04247948f)) : 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 59.40625f ? 
                     (data[3 /* residual sugar */] < 2.2453125f ? 
                        0.013459618f : 
                        0.061931394f) : 
                     (data[5 /* free sulfur dioxide */] < 27.25f ? 
                        -0.034734f : 
                        0.030271249f)))));
    return pred;
  } // constant pool size = 122B, number of visited nodes = 30, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_10_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.450048f ? 
         (data[1 /* volatile acidity */] < 0.40515625f ? 
             (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.749609f ? 
                 (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.6810156f ? 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.088375f ? 
                        -0.0012820343f : 
                        -0.03165848f) : 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 57.875f ? 
                        0.023613703f : 
                        -0.018580133f)) : 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 57.80078f ? 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.074125f ? 
                        0.052458804f : 
                        0.02225703f) : 
                    -0.013688551f)) : 
             (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.85949033f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 9.982031f ? 
                     (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 24.328125f ? 
                        -0.012026429f : 
                        -0.028125346f) : 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 76.05469f ? 
                        0.001432689f : 
                        -0.030117054f)) : 
                 (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 3.0859375f ? 
                     (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 2.150769f ? 
                        -0.05056841f : 
                        -0.0035540045f) : 
                    -0.10108927f))) : 
         (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.6855273f ? 
             (data[0 /* fixed acidity */] < 6.5642576f ? 
                 (data[3 /* residual sugar */] < 2.025f ? 
                    0.024965167f : 
                     (data[4 /* chlorides */] < 0.05725f ? 
                        -0.050744873f : 
                        0.0050702184f)) : 
                 (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 24.9375f ? 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.088875f ? 
                        0.014007528f : 
                        0.042474084f) : 
                    0.061917998f)) : 
             (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.0869375f ? 
                 (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 3.0949218f ? 
                     (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 18.375f ? 
                        0.051613446f : 
                        0.021249445f) : 
                    0.09797792f) : 
                 (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.8240625f ? 
                    0.027712619f : 
                    -0.010476251f))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_11_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.450293f ? 
         (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 12.545313f ? 
             (data[1 /* volatile acidity */] < 0.5485156f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 9.845312f ? 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.5625f ? 
                        -0.0077360547f : 
                        -0.040079866f) : 
                     (data[4 /* chlorides */] < 0.0626875f ? 
                        0.059985403f : 
                        0.004177549f)) : 
                 (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.4375f ? 
                     (data[0 /* fixed acidity */] < 6.740625f ? 
                        -0.040485937f : 
                        -0.012514009f) : 
                     (data[6 /* total sulfur dioxide */] < 49.914062f ? 
                        -0.09321226f : 
                        -0.019336337f))) : 
            0.045134097f) : 
         (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 1.0153906f ? 
             (data[9 /* sulphates */] < 0.58515626f ? 
                 (data[3 /* residual sugar */] < 2.0171876f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 42.25f ? 
                        0.02543881f : 
                        -0.017950166f) : 
                     (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 28.429688f ? 
                        -0.017583504f : 
                        0.056924876f)) : 
                 (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.09475f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 96.67969f ? 
                        0.026083626f : 
                        -0.01571063f) : 
                     (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 4.125f ? 
                        0.0046938765f : 
                        -0.042583708f))) : 
            -0.07344994f));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_12_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.450048f ? 
         (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.64638674f ? 
             (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.65367186f ? 
                 (data[2 /* citric acid */] < 0.024375f ? 
                     (data[0 /* fixed acidity */] < 6.71875f ? 
                        -0.028981468f : 
                        0.029480662f) : 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.42580077f ? 
                        -0.006269507f : 
                        -0.0229323f)) : 
                 (data[6 /* total sulfur dioxide */] < 14.421875f ? 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.9965f ? 
                        -0.029647306f : 
                        -0.07799462f) : 
                     (data[3 /* residual sugar */] < 1.5234375f ? 
                        -0.05011539f : 
                        -0.01608659f))) : 
             (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 50.515625f ? 
                 (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.65625f ? 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.09171875f ? 
                        0.017518602f : 
                        -0.009494199f) : 
                    0.062086776f) : 
                 (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 44.03125f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 83.5f ? 
                        -0.009602259f : 
                        -0.025916047f) : 
                    0.02567625f))) : 
         (data[9 /* sulphates */] < 0.61376953f ? 
             (data[4 /* chlorides */] < 0.05883594f ? 
                 (data[5 /* free sulfur dioxide */] < 13.986328f ? 
                    -0.069332026f : 
                    0.031201921f) : 
                 (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 3.9f ? 
                     (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 2.3601563f ? 
                        0.023802163f : 
                        9.921681E-4f) : 
                    0.045126554f)) : 
             (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.094601564f ? 
                 (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 4.5222654f ? 
                     (data[7 /* density */] < 0.9928031f ? 
                        0.057472087f : 
                        0.027606098f) : 
                    0.07075055f) : 
                 (data[8 /* pH */] < 3.1740625f ? 
                    0.040945202f : 
                     (data[1 /* volatile acidity */] < 0.40882814f ? 
                        0.021250753f : 
                        -0.039115753f)))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_13_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.450048f ? 
         (data[1 /* volatile acidity */] < 0.40515625f ? 
             (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.749609f ? 
                 (data[7 /* density */] < 0.99656904f ? 
                     (data[2 /* citric acid */] < 0.223125f ? 
                        0.011297276f : 
                        -0.031343076f) : 
                     (data[2 /* citric acid */] < 0.38625f ? 
                        0.028913878f : 
                        -0.0011626496f)) : 
                 (data[8 /* pH */] < 3.2642968f ? 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.2261255f ? 
                        0.033459887f : 
                        0.08306582f) : 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.074125f ? 
                        0.028862562f : 
                        -0.008361633f))) : 
             (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.85949033f ? 
                 (data[3 /* residual sugar */] < 1.64375f ? 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.1015625f ? 
                        -0.018312644f : 
                        -0.0832329f) : 
                     (data[9 /* sulphates */] < 0.57375f ? 
                        -0.013261183f : 
                        -7.745183E-4f)) : 
                 (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 3.0859375f ? 
                     (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 2.150769f ? 
                        -0.040827896f : 
                        3.114124E-4f) : 
                    -0.084680535f))) : 
         (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.6855273f ? 
             (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.444375f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.853516f ? 
                     (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 3.3375f ? 
                        0.014649675f : 
                        -0.030439658f) : 
                    -0.034973793f) : 
                 (data[0 /* fixed acidity */] < 10.046875f ? 
                     (data[1 /* volatile acidity */] < 0.34125f ? 
                        0.0685928f : 
                        0.04050168f) : 
                     (data[1 /* volatile acidity */] < 0.36f ? 
                        -0.009654403f : 
                        0.024230106f))) : 
             (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 18.46875f ? 
                 (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.08675f ? 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.067351565f ? 
                        0.027951624f : 
                        0.06296616f) : 
                    0.017682938f) : 
                 (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 27.491089f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 59.8125f ? 
                        0.020140659f : 
                        -0.037490692f) : 
                    0.03894629f))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 27, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_14_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* alcohol */] < 9.850439f ? 
         (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 12.545313f ? 
             (data[3 /* residual sugar */] < 1.646875f ? 
                 (data[6 /* total sulfur dioxide */] < 12.53125f ? 
                    0.013343224f : 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.61546874f ? 
                        -0.025343271f : 
                        -0.05133687f)) : 
                 (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.5625f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 100.890625f ? 
                        -0.006285354f : 
                        -0.021857997f) : 
                     (data[3 /* residual sugar */] < 2.13125f ? 
                        -0.0017194318f : 
                        -0.06404328f))) : 
            0.039798833f) : 
         (data[9 /* sulphates */] < 0.6349707f ? 
             (data[5 /* free sulfur dioxide */] < 7.517578f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.64375f ? 
                     (data[8 /* pH */] < 3.2995312f ? 
                        -0.0049468647f : 
                        -0.045392215f) : 
                     (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.5853125f ? 
                        0.007775356f : 
                        0.051855467f)) : 
                 (data[6 /* total sulfur dioxide */] < 19.265625f ? 
                     (data[2 /* citric acid */] < 0.06703125f ? 
                        0.07439097f : 
                        0.0083236545f) : 
                     (data[6 /* total sulfur dioxide */] < 27.694824f ? 
                        -0.016512098f : 
                        0.0026321171f))) : 
             (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 56.851562f ? 
                 (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 5.1402345f ? 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.99809873f ? 
                        0.024414012f : 
                        -0.0014535461f) : 
                    0.070451f) : 
                 (data[3 /* residual sugar */] < 1.9519532f ? 
                     (data[6 /* total sulfur dioxide */] < 76.140625f ? 
                        -0.026692595f : 
                        0.0815103f) : 
                     (data[2 /* citric acid */] < 0.1975f ? 
                        0.014949791f : 
                        -0.015878778f)))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_15_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.450048f ? 
         (data[1 /* volatile acidity */] < 0.40515625f ? 
             (data[10 /* alcohol */] < 9.6480465f ? 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 81.70703f ? 
                     (data[6 /* total sulfur dioxide */] < 20.083801f ? 
                        -0.023515077f : 
                        0.0072287424f) : 
                    -0.042101294f) : 
                 (data[8 /* pH */] < 3.2555077f ? 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.2232375f ? 
                        0.020103665f : 
                        0.085348226f) : 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.9990088f ? 
                        0.0014159619f : 
                        0.043640632f))) : 
             (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.85949033f ? 
                 (data[9 /* sulphates */] < 0.53875f ? 
                     (data[4 /* chlorides */] < 0.0658125f ? 
                        0.015585305f : 
                        -0.01860159f) : 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.328125f ? 
                        -3.585644E-4f : 
                        -0.01220012f)) : 
                 (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 3.0859375f ? 
                     (data[0 /* fixed acidity */] < 7.628125f ? 
                        -0.041681334f : 
                        -0.0031036022f) : 
                    -0.07431788f))) : 
         (data[9 /* sulphates */] < 0.5648438f ? 
             (data[4 /* chlorides */] < 0.05883594f ? 
                 (data[5 /* free sulfur dioxide */] < 11.490234f ? 
                    -0.065999895f : 
                    0.01673736f) : 
                 (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.54515624f ? 
                     (data[4 /* chlorides */] < 0.07f ? 
                        -0.0055971215f : 
                        0.019532816f) : 
                    0.033038467f)) : 
             (data[6 /* total sulfur dioxide */] < 12.6328125f ? 
                 (data[2 /* citric acid */] < 0.395f ? 
                    0.058768805f : 
                    0.038115405f) : 
                 (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.083f ? 
                     (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 2.775f ? 
                        0.015755435f : 
                        0.046391107f) : 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.35f ? 
                        0.017630035f : 
                        -0.017349962f)))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_16_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.450293f ? 
         (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 12.545313f ? 
             (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.60648435f ? 
                 (data[6 /* total sulfur dioxide */] < 36.078125f ? 
                     (data[9 /* sulphates */] < 0.4940625f ? 
                        -0.019346569f : 
                        0.009183229f) : 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.578125f ? 
                        -0.006155002f : 
                        -0.057384547f)) : 
                 (Double.isNaN(data[8]) || data[8 /* pH */] < 3.5452735f ? 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.3131483f ? 
                        -0.016828442f : 
                        -0.0046217493f) : 
                     (data[7 /* density */] < 0.9971692f ? 
                        -0.0651007f : 
                        -0.023867711f))) : 
            0.036135584f) : 
         (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 1.0153906f ? 
             (data[1 /* volatile acidity */] < 0.405056f ? 
                 (data[0 /* fixed acidity */] < 6.144922f ? 
                    -0.027778268f : 
                     (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.736875f ? 
                        0.010531397f : 
                        0.030143602f)) : 
                 (data[7 /* density */] < 0.9924806f ? 
                    0.053012162f : 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.8515625f ? 
                        0.0035329175f : 
                        -0.03138503f))) : 
            -0.052880526f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_17_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.450048f ? 
         (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.6076172f ? 
             (data[9 /* sulphates */] < 0.58441406f ? 
                 (data[2 /* citric acid */] < 0.0234375f ? 
                     (data[2 /* citric acid */] < 0.005126953f ? 
                        -0.028372543f : 
                        0.04317535f) : 
                     (data[1 /* volatile acidity */] < 0.345625f ? 
                        0.007284528f : 
                        -0.013620156f)) : 
                 (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.09619531f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 80.90625f ? 
                        0.012880988f : 
                        -0.020518024f) : 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.3560157f ? 
                        -0.0044788527f : 
                        -0.051494174f))) : 
             (Double.isNaN(data[8]) || data[8 /* pH */] < 3.6158593f ? 
                 (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.55515623f ? 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.4857617f ? 
                        -0.009788423f : 
                        -0.04843003f) : 
                    0.035642505f) : 
                -0.05626036f)) : 
         (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.6855273f ? 
             (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 31.5f ? 
                 (data[4 /* chlorides */] < 0.0616875f ? 
                     (data[9 /* sulphates */] < 0.5661719f ? 
                        -0.032757737f : 
                        0.011205271f) : 
                     (data[6 /* total sulfur dioxide */] < 14.9375f ? 
                        0.027391938f : 
                        0.0045981207f)) : 
                0.045581363f) : 
             (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.08353125f ? 
                 (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 2.7503905f ? 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.9955406f ? 
                        0.028368795f : 
                        -0.010286746f) : 
                    0.05549167f) : 
                 (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 12.9375f ? 
                    0.024104038f : 
                    -0.016585806f))));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_18_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* alcohol */] < 9.850439f ? 
         (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 12.545313f ? 
             (data[3 /* residual sugar */] < 1.646875f ? 
                 (data[6 /* total sulfur dioxide */] < 12.53125f ? 
                    0.013636789f : 
                     (data[2 /* citric acid */] < 0.050703123f ? 
                        -0.04556585f : 
                        -0.021587659f)) : 
                 (data[4 /* chlorides */] < 0.06134375f ? 
                    -0.04746808f : 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.5625f ? 
                        -0.0048511857f : 
                        -0.030530142f))) : 
            0.031969316f) : 
         (data[9 /* sulphates */] < 0.6349707f ? 
             (data[5 /* free sulfur dioxide */] < 7.517578f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.64375f ? 
                     (data[8 /* pH */] < 3.2995312f ? 
                        -0.0038889549f : 
                        -0.03847003f) : 
                     (data[3 /* residual sugar */] < 2.296875f ? 
                        0.03191382f : 
                        7.4413954E-4f)) : 
                 (data[6 /* total sulfur dioxide */] < 19.265625f ? 
                     (data[2 /* citric acid */] < 0.06703125f ? 
                        0.065164246f : 
                        0.0072600245f) : 
                     (data[3 /* residual sugar */] < 2.11875f ? 
                        -0.0066626514f : 
                        0.005652301f))) : 
             (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 54.640625f ? 
                 (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 5.1402345f ? 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.99809873f ? 
                        0.018770048f : 
                        -0.0019182211f) : 
                    0.059511986f) : 
                 (data[3 /* residual sugar */] < 2.2527344f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 82.34375f ? 
                        -0.004172292f : 
                        0.03953699f) : 
                     (data[0 /* fixed acidity */] < 7.8953123f ? 
                        -0.033664122f : 
                        0.0013773703f)))));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_19_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* alcohol */] < 9.850439f ? 
         (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 12.545313f ? 
             (data[3 /* residual sugar */] < 1.646875f ? 
                 (data[6 /* total sulfur dioxide */] < 12.53125f ? 
                    0.01227313f : 
                     (data[2 /* citric acid */] < 0.050703123f ? 
                        -0.041009244f : 
                        -0.019428873f)) : 
                 (data[4 /* chlorides */] < 0.06134375f ? 
                    -0.04272126f : 
                     (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 8.39375f ? 
                        -0.001619669f : 
                        -0.011860015f))) : 
            0.028772362f) : 
         (data[9 /* sulphates */] < 0.6349707f ? 
             (data[5 /* free sulfur dioxide */] < 8.488281f ? 
                 (data[1 /* volatile acidity */] < 0.381875f ? 
                     (data[10 /* alcohol */] < 11.053125f ? 
                        -0.019194188f : 
                        0.023166932f) : 
                     (data[6 /* total sulfur dioxide */] < 9.34375f ? 
                        -0.055991575f : 
                        -0.016638638f)) : 
                 (data[6 /* total sulfur dioxide */] < 19.265625f ? 
                     (data[10 /* alcohol */] < 11.201563f ? 
                        0.06509992f : 
                        0.011368157f) : 
                     (data[4 /* chlorides */] < 0.06576563f ? 
                        0.013200332f : 
                        -0.0028737336f))) : 
             (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.12147656f ? 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 54.890625f ? 
                     (data[10 /* alcohol */] < 10.134375f ? 
                        0.037825707f : 
                        0.0134903025f) : 
                     (data[2 /* citric acid */] < 0.1975f ? 
                        0.018142272f : 
                        -0.008302601f)) : 
                 (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 11.972656f ? 
                    0.008376673f : 
                    -0.064875506f))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_20_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.250097f ? 
         (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.6076172f ? 
             (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.09619531f ? 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 98.640625f ? 
                     (data[9 /* sulphates */] < 0.51375f ? 
                        -0.010439664f : 
                        0.007964661f) : 
                     (data[7 /* density */] < 0.99684f ? 
                        -0.023856873f : 
                        -0.010758142f)) : 
                 (Double.isNaN(data[8]) || data[8 /* pH */] < 3.33375f ? 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.16928124f ? 
                        -0.012941677f : 
                        0.014958547f) : 
                    -0.061129313f)) : 
             (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.5546875f ? 
                 (Double.isNaN(data[8]) || data[8 /* pH */] < 3.6159375f ? 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.959375f ? 
                        -0.007933242f : 
                        -0.032316614f) : 
                    -0.05092863f) : 
                0.032069787f)) : 
         (data[4 /* chlorides */] < 0.058796875f ? 
             (data[7 /* density */] < 0.9932185f ? 
                 (data[6 /* total sulfur dioxide */] < 83.00781f ? 
                    3.97454E-4f : 
                    0.040258322f) : 
                 (data[9 /* sulphates */] < 0.5625f ? 
                    -0.049458593f : 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 30.148438f ? 
                        0.01754326f : 
                        -0.028899757f))) : 
             (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 12.434961f ? 
                 (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 3.5125f ? 
                     (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 10.0875f ? 
                        0.015010675f : 
                        -0.0038488721f) : 
                     (data[1 /* volatile acidity */] < 0.43070313f ? 
                        0.0515597f : 
                        0.012990414f)) : 
                -0.020518303f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_21_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* volatile acidity */] < 0.3623828f ? 
         (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.79642576f ? 
             (data[6 /* total sulfur dioxide */] < 10.421875f ? 
                 (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.071476564f ? 
                    0.05543638f : 
                    -0.0019645737f) : 
                 (data[8 /* pH */] < 3.1642969f ? 
                     (data[2 /* citric acid */] < 0.463125f ? 
                        -0.0076064044f : 
                        0.041840274f) : 
                     (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 3.18125f ? 
                        -0.0060548284f : 
                        0.028496932f))) : 
             (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 56.851562f ? 
                 (data[0 /* fixed acidity */] < 8.167188f ? 
                    0.049098346f : 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.2678125f ? 
                        0.03029154f : 
                        -5.894017E-4f)) : 
                -0.009929067f)) : 
         (data[7 /* density */] < 0.99241096f ? 
            0.03624773f : 
             (data[6 /* total sulfur dioxide */] < 9.4921875f ? 
                -0.03929757f : 
                 (data[9 /* sulphates */] < 0.57789063f ? 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.34375f ? 
                        -0.0055931835f : 
                        -0.019484047f) : 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 107.421875f ? 
                        0.0018406509f : 
                        -0.018232705f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_22_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* alcohol */] < 9.850439f ? 
         (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 12.545313f ? 
             (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.5644531f ? 
                 (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.6083594f ? 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.17065625f ? 
                        -0.0029334486f : 
                        0.026440626f) : 
                     (data[1 /* volatile acidity */] < 0.6182288f ? 
                        -0.03850206f : 
                        -0.008359211f)) : 
                 (data[0 /* fixed acidity */] < 9.1636715f ? 
                    -0.0052402844f : 
                    -0.045136392f)) : 
            0.024163775f) : 
         (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.6542969f ? 
             (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 12.037695f ? 
                 (data[8 /* pH */] < 3.2351563f ? 
                     (data[9 /* sulphates */] < 0.616875f ? 
                        0.0022892673f : 
                        0.020922624f) : 
                     (data[5 /* free sulfur dioxide */] < 7.65625f ? 
                        -0.009110096f : 
                        0.0031590431f)) : 
                 (data[8 /* pH */] < 3.08375f ? 
                    -0.061598163f : 
                    -0.007518241f)) : 
             (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.755468f ? 
                 (data[9 /* sulphates */] < 0.705f ? 
                    0.030449953f : 
                    0.06740134f) : 
                0.005884835f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_23_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.450048f ? 
         (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.67177737f ? 
             (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.09843359f ? 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 98.640625f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 88.50806f ? 
                        0.0030264622f : 
                        0.03435609f) : 
                     (data[2 /* citric acid */] < 0.2315625f ? 
                        -0.0262014f : 
                        -0.010571505f)) : 
                 (data[3 /* residual sugar */] < 1.646875f ? 
                    -0.049309675f : 
                     (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.74953127f ? 
                        -0.017012114f : 
                        0.004078222f))) : 
             (data[2 /* citric acid */] < 0.064453125f ? 
                 (data[5 /* free sulfur dioxide */] < 6.3007812f ? 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.00515625f ? 
                        -0.014800361f : 
                        -0.07409162f) : 
                     (data[10 /* alcohol */] < 9.854688f ? 
                        -0.0342927f : 
                        0.002785541f)) : 
                 (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.13888282f ? 
                     (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 2.65625f ? 
                        -0.009986943f : 
                        0.0130085f) : 
                    0.027778558f))) : 
         (data[4 /* chlorides */] < 0.058796875f ? 
             (data[7 /* density */] < 0.9932185f ? 
                 (data[6 /* total sulfur dioxide */] < 83.00781f ? 
                    -9.756497E-4f : 
                    0.033920795f) : 
                 (data[9 /* sulphates */] < 0.5625f ? 
                    -0.05340717f : 
                     (data[8 /* pH */] < 3.39125f ? 
                        0.012284565f : 
                        -0.017511314f))) : 
             (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.92515624f ? 
                 (data[8 /* pH */] < 3.245625f ? 
                     (data[5 /* free sulfur dioxide */] < 8.25f ? 
                        0.046453398f : 
                        0.0044705146f) : 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.095796876f ? 
                        0.012826788f : 
                        -0.023631083f)) : 
                -0.015296102f)));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_24_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* volatile acidity */] < 0.40515625f ? 
         (data[10 /* alcohol */] < 10.75498f ? 
             (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.552599f ? 
                 (Double.isNaN(data[7]) || data[7 /* density */] < 1.0001589f ? 
                     (data[10 /* alcohol */] < 9.646875f ? 
                        -0.0035416835f : 
                        0.012489234f) : 
                    -0.0346312f) : 
                -0.02537176f) : 
             (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 56.851562f ? 
                 (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.73398435f ? 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.3875f ? 
                        0.013459663f : 
                        -0.012918584f) : 
                     (data[0 /* fixed acidity */] < 7.909375f ? 
                        0.041310992f : 
                        0.019625822f)) : 
                 (data[5 /* free sulfur dioxide */] < 28.390625f ? 
                    -0.031509157f : 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.40375f ? 
                        -0.004581447f : 
                        0.029548464f)))) : 
         (data[7 /* density */] < 0.99241096f ? 
            0.038456224f : 
             (data[9 /* sulphates */] < 0.5354883f ? 
                 (data[8 /* pH */] < 3.295625f ? 
                     (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 3.5007813f ? 
                        -0.008119583f : 
                        0.030804759f) : 
                     (data[10 /* alcohol */] < 9.25f ? 
                        -0.051021017f : 
                        -0.012987671f)) : 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.840625f ? 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.4529295f ? 
                        -0.0021761507f : 
                        0.010656144f) : 
                    -0.032603614f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_25_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* volatile acidity */] < 0.3623828f ? 
         (data[0 /* fixed acidity */] < 6.144922f ? 
            -0.02361372f : 
             (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.8152149f ? 
                 (data[6 /* total sulfur dioxide */] < 10.421875f ? 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.068890624f ? 
                        0.04721204f : 
                        0.0022890829f) : 
                     (data[1 /* volatile acidity */] < 0.234375f ? 
                        -0.01716044f : 
                        0.0044058403f)) : 
                 (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.08498438f ? 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.07053735f ? 
                        0.012753279f : 
                        0.046692986f) : 
                    -0.012520137f))) : 
         (data[6 /* total sulfur dioxide */] < 9.592773f ? 
            -0.033676162f : 
             (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 8.189062f ? 
                 (data[7 /* density */] < 0.9924132f ? 
                    0.027359676f : 
                     (data[3 /* residual sugar */] < 1.63125f ? 
                        -0.014252663f : 
                        -0.0011224506f)) : 
                0.03700706f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_26_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.250097f ? 
         (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.6076172f ? 
             (data[6 /* total sulfur dioxide */] < 35.476562f ? 
                 (data[2 /* citric acid */] < 0.1875f ? 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.15527344f ? 
                        0.011993239f : 
                        0.05566107f) : 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.2360938f ? 
                        0.012049367f : 
                        -0.0087031f)) : 
                 (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.59375f ? 
                     (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 8.35f ? 
                        -0.0032300223f : 
                        0.034300968f) : 
                    -0.04032315f)) : 
             (Double.isNaN(data[8]) || data[8 /* pH */] < 3.6158593f ? 
                 (Double.isNaN(data[7]) || data[7 /* density */] < 0.9980894f ? 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.9975257f ? 
                        -0.0054927664f : 
                        -0.02532859f) : 
                     (data[4 /* chlorides */] < 0.086f ? 
                        0.030283418f : 
                        -0.008468041f)) : 
                -0.045008626f)) : 
         (data[4 /* chlorides */] < 0.058796875f ? 
             (data[5 /* free sulfur dioxide */] < 11.4375f ? 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 15.8125f ? 
                    5.070597E-4f : 
                    -0.04765205f) : 
                 (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.053507812f ? 
                     (data[4 /* chlorides */] < 0.045400817f ? 
                        0.029044999f : 
                        -0.014493451f) : 
                    0.03569463f)) : 
             (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 10.051367f ? 
                 (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 8.847721f ? 
                     (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.7764062f ? 
                        0.01214239f : 
                        -0.009982329f) : 
                     (data[5 /* free sulfur dioxide */] < 5.25f ? 
                        5.184889E-4f : 
                        0.03614603f)) : 
                 (data[9 /* sulphates */] < 0.64523435f ? 
                    -0.02554483f : 
                     (data[3 /* residual sugar */] < 2.3375f ? 
                        -0.017554529f : 
                        0.011354886f)))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_27_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* volatile acidity */] < 0.3623828f ? 
         (data[6 /* total sulfur dioxide */] < 17.331055f ? 
             (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 2.496875f ? 
                 (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.54476565f ? 
                     (data[2 /* citric acid */] < 0.36514282f ? 
                        0.052692037f : 
                        0.008658825f) : 
                    -0.04284165f) : 
                0.062299117f) : 
             (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.095796876f ? 
                 (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.43570313f ? 
                     (data[5 /* free sulfur dioxide */] < 8.765625f ? 
                        -0.030596295f : 
                        0.0017900692f) : 
                     (data[8 /* pH */] < 3.0925f ? 
                        0.043838553f : 
                        0.01402089f)) : 
                 (data[7 /* density */] < 0.9974607f ? 
                    -0.0029709737f : 
                    -0.037965443f))) : 
         (data[6 /* total sulfur dioxide */] < 9.592773f ? 
            -0.03083266f : 
             (data[3 /* residual sugar */] < 1.6992188f ? 
                 (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.8428125f ? 
                     (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.6249243f ? 
                        -0.014147193f : 
                        0.015331133f) : 
                    -0.06474495f) : 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 98.359375f ? 
                     (data[8 /* pH */] < 3.06625f ? 
                        -0.017259154f : 
                        0.0018386536f) : 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.28375f ? 
                        -0.005227851f : 
                        -0.020780714f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_28_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.68471193f ? 
         (Double.isNaN(data[8]) || data[8 /* pH */] < 3.4258497f ? 
             (data[6 /* total sulfur dioxide */] < 18.160156f ? 
                 (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 8.660156f ? 
                     (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.6335156f ? 
                        -0.0015972927f : 
                        0.033916328f) : 
                    0.047072593f) : 
                 (data[8 /* pH */] < 3.015f ? 
                    0.030264854f : 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.34125f ? 
                        -1.6826771E-4f : 
                        -0.011366409f))) : 
             (data[5 /* free sulfur dioxide */] < 6.5039062f ? 
                 (data[2 /* citric acid */] < 0.012890625f ? 
                    -0.005657479f : 
                    -0.05223763f) : 
                 (data[2 /* citric acid */] < 0.043828126f ? 
                     (data[4 /* chlorides */] < 0.0641875f ? 
                        0.023846686f : 
                        -0.0017165653f) : 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.09221875f ? 
                        -0.01021061f : 
                        -0.046448722f)))) : 
         (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 50.495117f ? 
             (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 5.1660156f ? 
                 (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.6471875f ? 
                     (data[0 /* fixed acidity */] < 8.076563f ? 
                        0.015879964f : 
                        7.215466E-4f) : 
                    0.039836414f) : 
                0.051398434f) : 
             (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 44.03125f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.436719f ? 
                     (data[0 /* fixed acidity */] < 7.725f ? 
                        -0.019742714f : 
                        -0.00502327f) : 
                     (data[1 /* volatile acidity */] < 0.43246093f ? 
                        -0.02156137f : 
                        0.021633388f)) : 
                0.018336274f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_29_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.8578418f ? 
         (data[10 /* alcohol */] < 9.447363f ? 
             (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.7817871f ? 
                 (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 11.9375f ? 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.2892187f ? 
                        -0.013923451f : 
                        -0.00223873f) : 
                    0.022189764f) : 
                0.030043526f) : 
             (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.6542969f ? 
                 (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 12.015625f ? 
                     (data[8 /* pH */] < 3.261875f ? 
                        0.0075627747f : 
                        -2.5979456E-4f) : 
                     (data[8 /* pH */] < 3.08375f ? 
                        -0.053362835f : 
                        -0.0038220447f)) : 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.757031f ? 
                     (data[9 /* sulphates */] < 0.705f ? 
                        0.020096848f : 
                        0.061784707f) : 
                    0.0013996982f))) : 
         (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 3.2525392f ? 
             (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 2.1489758f ? 
                 (data[3 /* residual sugar */] < 1.9500291f ? 
                    0.002248017f : 
                    -0.037303362f) : 
                 (data[5 /* free sulfur dioxide */] < 8.4921875f ? 
                    0.033332672f : 
                    -0.0053174407f)) : 
            -0.052447736f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_30_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[9 /* sulphates */] < 0.5248877f ? 
         (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 4.5214844f ? 
             (data[4 /* chlorides */] < 0.06678516f ? 
                 (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.3666797f ? 
                     (data[7 /* density */] < 0.99400795f ? 
                        -0.005684757f : 
                        0.024390437f) : 
                    -0.022605905f) : 
                 (data[7 /* density */] < 0.99531573f ? 
                     (data[6 /* total sulfur dioxide */] < 30.5f ? 
                        -0.058754366f : 
                        -0.01008119f) : 
                     (data[5 /* free sulfur dioxide */] < 5.25f ? 
                        0.006980548f : 
                        -0.010660286f))) : 
            0.016124634f) : 
         (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 106.87402f ? 
             (Double.isNaN(data[8]) || data[8 /* pH */] < 3.476699f ? 
                 (Double.isNaN(data[8]) || data[8 /* pH */] < 3.4651883f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 46.625f ? 
                        0.0056372616f : 
                        -0.0025967287f) : 
                    0.037099432f) : 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.1324215f ? 
                     (data[6 /* total sulfur dioxide */] < 13.546875f ? 
                        -0.04766621f : 
                        -0.0072585028f) : 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.993775f ? 
                        0.0037655153f : 
                        0.037948634f))) : 
             (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 134.46115f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.042188f ? 
                     (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.71125f ? 
                        -0.008696016f : 
                        -0.023219472f) : 
                    -0.030467184f) : 
                 (data[1 /* volatile acidity */] < 0.5117578f ? 
                    0.010266237f : 
                    -0.010083457f))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_31_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[9 /* sulphates */] < 0.57544434f ? 
         (Double.isNaN(data[7]) || data[7 /* density */] < 0.9970396f ? 
             (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 7.6585937f ? 
                 (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.3046875f ? 
                     (data[5 /* free sulfur dioxide */] < 12.28125f ? 
                        -0.016958948f : 
                        -0.0021918113f) : 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.355469f ? 
                        0.034913823f : 
                        0.007467157f)) : 
                 (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.24679688f ? 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.9968028f ? 
                        0.012362606f : 
                        0.052368857f) : 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.44309205f ? 
                        -0.01751011f : 
                        0.015979925f))) : 
             (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.5648438f ? 
                 (data[2 /* citric acid */] < 0.095703125f ? 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.724375f ? 
                        -0.008178356f : 
                        -0.055148114f) : 
                     (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 3.259375f ? 
                        -0.0060938736f : 
                        0.024697442f)) : 
                 (data[6 /* total sulfur dioxide */] < 63.21875f ? 
                    -0.054154713f : 
                    -0.011215774f))) : 
         (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.09740429f ? 
             (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.08242007f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 10.761328f ? 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.5428126f ? 
                        -0.0017864278f : 
                        -0.028571429f) : 
                     (data[10 /* alcohol */] < 10.8372345f ? 
                        0.035602678f : 
                        0.003772759f)) : 
                 (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.66414064f ? 
                     (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 12.890625f ? 
                        0.018592939f : 
                        -0.026802631f) : 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 50.671875f ? 
                        0.005658285f : 
                        -0.044342145f))) : 
             (data[6 /* total sulfur dioxide */] < 15.626953f ? 
                 (data[3 /* residual sugar */] < 2.275f ? 
                    2.212221E-4f : 
                    0.033679113f) : 
                 (data[7 /* density */] < 0.99653524f ? 
                     (data[4 /* chlorides */] < 0.10601562f ? 
                        -0.015397732f : 
                        0.020559214f) : 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.34375f ? 
                        -0.0095009245f : 
                        -0.05678068f)))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 27, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_32_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.68471193f ? 
         (Double.isNaN(data[8]) || data[8 /* pH */] < 3.4258497f ? 
             (Double.isNaN(data[7]) || data[7 /* density */] < 0.99730176f ? 
                 (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 4.4929686f ? 
                     (data[9 /* sulphates */] < 0.5241406f ? 
                        -0.006576703f : 
                        0.0046199695f) : 
                     (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 9.46875f ? 
                        8.295655E-4f : 
                        0.056743775f)) : 
                 (Double.isNaN(data[7]) || data[7 /* density */] < 0.9983155f ? 
                     (data[2 /* citric acid */] < 0.095f ? 
                        -0.03748178f : 
                        -0.009017045f) : 
                     (data[2 /* citric acid */] < 0.130625f ? 
                        0.03789699f : 
                        -0.0017678123f))) : 
             (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 8.252344f ? 
                 (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 7.7530003f ? 
                     (data[5 /* free sulfur dioxide */] < 6.046875f ? 
                        -0.028537238f : 
                        -0.0042869123f) : 
                    0.024812182f) : 
                -0.03799551f)) : 
         (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 50.495117f ? 
             (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 5.1660156f ? 
                 (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.4366992f ? 
                     (data[0 /* fixed acidity */] < 7.575f ? 
                        0.039598957f : 
                        0.0066565108f) : 
                     (data[1 /* volatile acidity */] < 0.48523682f ? 
                        -0.029160874f : 
                        0.005570759f)) : 
                0.043821167f) : 
             (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 44.03125f ? 
                 (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 10.875781f ? 
                     (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 10.233117f ? 
                        -0.006708074f : 
                        0.02594998f) : 
                    -0.026804652f) : 
                0.017824924f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_33_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[7 /* density */] < 0.9955632f ? 
         (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.12957714f ? 
             (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.4555469f ? 
                 (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.39504457f ? 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.29319713f ? 
                        0.0018991021f : 
                        0.023318423f) : 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.99521685f ? 
                        -0.024761f : 
                        0.010621037f)) : 
                 (data[4 /* chlorides */] < 0.07053515f ? 
                    0.009784159f : 
                    0.04052368f)) : 
            -0.034721933f) : 
         (data[0 /* fixed acidity */] < 6.7518554f ? 
             (data[5 /* free sulfur dioxide */] < 6.546875f ? 
                -0.06540221f : 
                 (data[4 /* chlorides */] < 0.0695625f ? 
                    0.017423142f : 
                     (data[9 /* sulphates */] < 0.6053125f ? 
                        -1.8746614E-4f : 
                        -0.026264712f))) : 
             (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.84259766f ? 
                 (data[2 /* citric acid */] < 0.1875f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 49.640625f ? 
                        0.01118456f : 
                        -0.0046743774f) : 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.2446876f ? 
                        0.0015981771f : 
                        -0.0055675544f)) : 
                 (data[0 /* fixed acidity */] < 7.5464845f ? 
                    -0.057286847f : 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.95867187f ? 
                        -0.02130212f : 
                        0.022736099f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_34_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* alcohol */] < 9.450537f ? 
         (Double.isNaN(data[8]) || data[8 /* pH */] < 3.4953027f ? 
             (data[6 /* total sulfur dioxide */] < 39.435547f ? 
                 (data[6 /* total sulfur dioxide */] < 23.594978f ? 
                     (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.714375f ? 
                        -0.0049985363f : 
                        -0.045035277f) : 
                     (data[9 /* sulphates */] < 0.5414063f ? 
                        -0.013584093f : 
                        0.023180746f)) : 
                 (data[6 /* total sulfur dioxide */] < 47.420547f ? 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.99740094f ? 
                        -0.010755897f : 
                        -0.059919648f) : 
                     (data[10 /* alcohol */] < 9.146875f ? 
                        0.006010073f : 
                        -0.010223213f))) : 
            0.026730867f) : 
         (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.6542969f ? 
             (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 12.037695f ? 
                 (data[8 /* pH */] < 3.261875f ? 
                     (data[6 /* total sulfur dioxide */] < 10.96875f ? 
                        0.029498698f : 
                        0.0043326826f) : 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.59414065f ? 
                        -5.4498983E-4f : 
                        -0.04059148f)) : 
                 (data[8 /* pH */] < 3.08375f ? 
                    -0.045901284f : 
                     (data[6 /* total sulfur dioxide */] < 22.710938f ? 
                        -0.01980269f : 
                        0.010468248f))) : 
             (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.757031f ? 
                 (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 2.9296875f ? 
                    0.017427841f : 
                    0.053851653f) : 
                -0.002090524f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_35_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.68471193f ? 
         (data[4 /* chlorides */] < 0.06698633f ? 
             (Double.isNaN(data[7]) || data[7 /* density */] < 0.9972505f ? 
                 (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.6553906f ? 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.99533546f ? 
                        0.005800781f : 
                        -0.016087513f) : 
                    0.02857332f) : 
                 (data[7 /* density */] < 0.99785024f ? 
                    0.043437902f : 
                    0.015536026f)) : 
             (data[8 /* pH */] < 2.9903517f ? 
                0.03420333f : 
                 (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.65457034f ? 
                     (data[8 /* pH */] < 3.073125f ? 
                        -0.03064824f : 
                        -0.0011362776f) : 
                     (data[2 /* citric acid */] < 0.0853125f ? 
                        0.008424427f : 
                        -0.025120296f)))) : 
         (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.12197266f ? 
             (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 56.427734f ? 
                 (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.10803125f ? 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.097088866f ? 
                        0.008372359f : 
                        -0.019983767f) : 
                    0.04387682f) : 
                 (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 8.423437f ? 
                     (data[4 /* chlorides */] < 0.04840625f ? 
                        0.01556986f : 
                        -0.016514223f) : 
                     (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 34.539062f ? 
                        -0.009811595f : 
                        0.053359754f))) : 
             (data[9 /* sulphates */] < 0.75396484f ? 
                -0.040340446f : 
                 (data[9 /* sulphates */] < 0.846444f ? 
                    0.025444083f : 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.99741954f ? 
                        0.0042310585f : 
                        -0.04476727f)))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_36_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* residual sugar */] < 1.6770508f ? 
         (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.8551367f ? 
             (Double.isNaN(data[7]) || data[7 /* density */] < 0.99694335f ? 
                 (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.07040625f ? 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.63273436f ? 
                        -0.0061971634f : 
                        0.022970503f) : 
                     (data[0 /* fixed acidity */] < 6.9125f ? 
                        -0.0395094f : 
                        -0.013486983f)) : 
                 (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.67f ? 
                    -0.016290454f : 
                    0.05242589f)) : 
            -0.046708535f) : 
         (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.6632227f ? 
             (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.09857422f ? 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 98.859375f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 90.15381f ? 
                        0.0037232218f : 
                        0.041899227f) : 
                     (data[1 /* volatile acidity */] < 0.3478125f ? 
                        0.010326581f : 
                        -0.010930185f)) : 
                 (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 9.146484f ? 
                     (data[0 /* fixed acidity */] < 7.4507294f ? 
                        -0.019245096f : 
                        0.008097748f) : 
                     (data[0 /* fixed acidity */] < 9.962769f ? 
                        -0.039433338f : 
                        -0.0057305507f))) : 
             (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.13952148f ? 
                 (data[6 /* total sulfur dioxide */] < 29.820312f ? 
                     (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.69523436f ? 
                        -0.018332096f : 
                        0.02083282f) : 
                     (data[4 /* chlorides */] < 0.0788125f ? 
                        0.010634077f : 
                        -0.0065611494f)) : 
                0.031407245f)));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_37_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[9 /* sulphates */] < 0.4645459f ? 
         (data[4 /* chlorides */] < 0.059966795f ? 
            0.0076635415f : 
             (data[4 /* chlorides */] < 0.0724546f ? 
                -0.033195682f : 
                 (Double.isNaN(data[8]) || data[8 /* pH */] < 3.2647657f ? 
                     (data[0 /* fixed acidity */] < 8.0375f ? 
                        -0.010408545f : 
                        0.0053711217f) : 
                     (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 7.4078126f ? 
                        -1.2562276E-4f : 
                        -0.043129914f)))) : 
         (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.8571289f ? 
             (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.83265394f ? 
                 (data[10 /* alcohol */] < 9.441015f ? 
                     (data[3 /* residual sugar */] < 1.646875f ? 
                        -0.020056417f : 
                        -0.0026542007f) : 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.4742188f ? 
                        0.0029663166f : 
                        -0.0066106142f)) : 
                0.027317422f) : 
             (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 3.2388673f ? 
                 (data[0 /* fixed acidity */] < 7.5601563f ? 
                     (data[1 /* volatile acidity */] < 0.94078124f ? 
                        8.2295894E-4f : 
                        -0.04235795f) : 
                     (data[2 /* citric acid */] < 0.1340625f ? 
                        0.033165358f : 
                        -0.009312136f)) : 
                -0.046064083f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_38_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[9 /* sulphates */] < 0.57544434f ? 
         (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.5648979f ? 
             (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.5249836f ? 
                 (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 3.540625f ? 
                     (data[4 /* chlorides */] < 0.07973438f ? 
                        -3.8051882E-4f : 
                        -0.012408726f) : 
                     (data[2 /* citric acid */] < 0.10359375f ? 
                        -0.031161912f : 
                        0.038119666f)) : 
                 (data[4 /* chlorides */] < 0.061804686f ? 
                    -0.028542548f : 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.9973297f ? 
                        0.008831051f : 
                        -0.0035482214f))) : 
             (Double.isNaN(data[7]) || data[7 /* density */] < 0.99692297f ? 
                 (Double.isNaN(data[8]) || data[8 /* pH */] < 3.349375f ? 
                    -0.009684842f : 
                    0.010980204f) : 
                 (data[6 /* total sulfur dioxide */] < 63.296875f ? 
                    -0.049694195f : 
                    -0.009797295f))) : 
         (data[6 /* total sulfur dioxide */] < 8.487305f ? 
            -0.02846209f : 
             (data[6 /* total sulfur dioxide */] < 10.627127f ? 
                 (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.0700625f ? 
                    0.008456567f : 
                    0.0383817f) : 
                 (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.09710938f ? 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.08231812f ? 
                        -1.7489206E-4f : 
                        0.009689303f) : 
                     (data[4 /* chlorides */] < 0.10513892f ? 
                        -0.016472323f : 
                        -6.593213E-4f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_39_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* residual sugar */] < 1.6770508f ? 
         (Double.isNaN(data[7]) || data[7 /* density */] < 0.9976248f ? 
             (Double.isNaN(data[7]) || data[7 /* density */] < 0.99694604f ? 
                 (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.069625f ? 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.63273436f ? 
                        -0.0045609996f : 
                        0.025301147f) : 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.18703125f ? 
                        -0.025490332f : 
                        -0.0077821007f)) : 
                0.023285994f) : 
            -0.044376593f) : 
         (data[7 /* density */] < 0.9923843f ? 
            0.024017848f : 
             (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.856054f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.055357f ? 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.6175f ? 
                        2.0212E-4f : 
                        -0.019315848f) : 
                     (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 25.40625f ? 
                        0.0060900757f : 
                        0.039046545f)) : 
                 (data[1 /* volatile acidity */] < 0.47929686f ? 
                    -0.003590288f : 
                    -0.029776914f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_40_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 107.01221f ? 
         (data[7 /* density */] < 0.99282324f ? 
             (data[2 /* citric acid */] < 0.025390625f ? 
                -0.007380934f : 
                0.03210163f) : 
             (data[6 /* total sulfur dioxide */] < 8.5390625f ? 
                -0.019242797f : 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.9449215f ? 
                     (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 4.5515623f ? 
                        1.04908744E-4f : 
                        0.011148622f) : 
                    -0.021741025f))) : 
         (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.1003291f ? 
             (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 146.17969f ? 
                 (data[7 /* density */] < 0.9972535f ? 
                     (data[6 /* total sulfur dioxide */] < 119.5625f ? 
                        -0.030172657f : 
                        -0.014011061f) : 
                     (data[9 /* sulphates */] < 0.5598438f ? 
                        0.001834735f : 
                        -0.009981343f)) : 
                0.0043937815f) : 
             (data[7 /* density */] < 0.9975053f ? 
                0.01788669f : 
                -0.005433178f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_41_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 51.51123f ? 
         (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 106.87402f ? 
             (Double.isNaN(data[7]) || data[7 /* density */] < 1.0000714f ? 
                 (Double.isNaN(data[7]) || data[7 /* density */] < 0.9999557f ? 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.6675f ? 
                        0.0014661655f : 
                        -0.0035491833f) : 
                    0.028768308f) : 
                 (data[6 /* total sulfur dioxide */] < 29.4375f ? 
                    -0.026739102f : 
                     (data[5 /* free sulfur dioxide */] < 9.5f ? 
                        0.032698244f : 
                        -0.011756285f))) : 
             (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.10091406f ? 
                 (data[7 /* density */] < 0.99723977f ? 
                     (data[6 /* total sulfur dioxide */] < 119.3125f ? 
                        -0.027155373f : 
                        -0.008968365f) : 
                     (data[9 /* sulphates */] < 0.5598438f ? 
                        0.0014922449f : 
                        -0.0089832265f)) : 
                0.0075989105f)) : 
        0.02196933f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_42_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* residual sugar */] < 1.35625f ? 
        -0.01770029f : 
         (data[7 /* density */] < 0.99282324f ? 
             (data[2 /* citric acid */] < 0.01953125f ? 
                -0.0070739747f : 
                0.027828347f) : 
             (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.957617f ? 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.049654f ? 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.6071875f ? 
                        -1.5541431E-4f : 
                        -0.015466186f) : 
                     (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 25.40625f ? 
                        0.004438102f : 
                        0.029666707f)) : 
                -0.019708125f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_43_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 51.51123f ? 
         (data[10 /* alcohol */] < 9.447363f ? 
             (Double.isNaN(data[8]) || data[8 /* pH */] < 3.496543f ? 
                 (data[6 /* total sulfur dioxide */] < 38.585938f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 23.531921f ? 
                        -0.011099324f : 
                        0.015592789f) : 
                     (data[6 /* total sulfur dioxide */] < 47.524536f ? 
                        -0.02299736f : 
                        -0.006449232f)) : 
                0.024243288f) : 
             (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.6542969f ? 
                 (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 12.015625f ? 
                     (data[8 /* pH */] < 3.2440624f ? 
                        0.0054260595f : 
                        -0.0010297007f) : 
                     (data[8 /* pH */] < 3.08375f ? 
                        -0.041139133f : 
                        -9.5814414E-4f)) : 
                 (Double.isNaN(data[10]) || data[10 /* alcohol */] < 11.757031f ? 
                     (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.705f ? 
                        0.01469657f : 
                        0.045259766f) : 
                    -0.0030039374f))) : 
        0.019787943f);
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_44_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[9 /* sulphates */] < 0.5248877f ? 
         (data[8 /* pH */] < 3.2943847f ? 
             (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 3.5152345f ? 
                 (data[4 /* chlorides */] < 0.07903125f ? 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.36421874f ? 
                        0.01318552f : 
                        -0.017784115f) : 
                     (data[4 /* chlorides */] < 0.08856128f ? 
                        -0.019104531f : 
                        -0.0011701073f)) : 
                0.031192586f) : 
             (data[3 /* residual sugar */] < 2.0425782f ? 
                 (data[8 /* pH */] < 3.3457031f ? 
                    -0.021850295f : 
                     (data[2 /* citric acid */] < 0.02578125f ? 
                        0.033287343f : 
                        -0.006836276f)) : 
                 (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 47.6875f ? 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 22.90332f ? 
                        -0.008629998f : 
                        -0.037849948f) : 
                     (data[3 /* residual sugar */] < 2.284375f ? 
                        -0.012839613f : 
                        0.012948808f)))) : 
         (Double.isNaN(data[5]) || data[5 /* free sulfur dioxide */] < 51.476562f ? 
             (data[7 /* density */] < 0.9953641f ? 
                 (data[6 /* total sulfur dioxide */] < 12.2109375f ? 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.07075f ? 
                        0.028321972f : 
                        0.0010806759f) : 
                     (data[5 /* free sulfur dioxide */] < 7.5f ? 
                        -0.016223358f : 
                        0.0045479923f)) : 
                 (data[0 /* fixed acidity */] < 6.71875f ? 
                     (data[5 /* free sulfur dioxide */] < 6.46875f ? 
                        -0.041803166f : 
                        -0.009214209f) : 
                     (data[2 /* citric acid */] < 0.125f ? 
                        0.0072066644f : 
                        -0.0013043064f))) : 
            0.024178619f));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_45_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 109.49951f ? 
         (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.09740429f ? 
             (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.090398476f ? 
                 (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.66828126f ? 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.6825f ? 
                        0.0012467762f : 
                        0.032322284f) : 
                     (Double.isNaN(data[4]) || data[4 /* chlorides */] < 0.0778125f ? 
                        5.294278E-5f : 
                        -0.01526155f)) : 
                 (Double.isNaN(data[8]) || data[8 /* pH */] < 3.506875f ? 
                     (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 11.9625f ? 
                        0.018892812f : 
                        -0.016898504f) : 
                    -0.035485595f)) : 
             (data[7 /* density */] < 0.9967736f ? 
                 (data[7 /* density */] < 0.99511313f ? 
                    -0.029206486f : 
                     (data[5 /* free sulfur dioxide */] < 7.40625f ? 
                        0.023385366f : 
                        0.0022609234f)) : 
                 (Double.isNaN(data[8]) || data[8 /* pH */] < 3.3760939f ? 
                     (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.7259375f ? 
                        -0.0134159895f : 
                        0.003629831f) : 
                    -0.05277911f))) : 
         (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 133.51471f ? 
             (data[7 /* density */] < 0.99667853f ? 
                -0.020021323f : 
                 (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.74285156f ? 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 9.457031f ? 
                        9.1501605E-4f : 
                        -0.009009743f) : 
                    -0.017522626f)) : 
             (Double.isNaN(data[10]) || data[10 /* alcohol */] < 9.799219f ? 
                 (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.6370703f ? 
                    -0.011157223f : 
                    1.6654491E-4f) : 
                0.010973631f)));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_46_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* residual sugar */] < 1.6770508f ? 
         (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.8355664f ? 
             (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.75463784f ? 
                 (data[7 /* density */] < 0.9946759f ? 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.99431604f ? 
                        -0.008659488f : 
                        0.03948379f) : 
                     (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 8.2625f ? 
                        -0.017764201f : 
                        -0.0019036783f)) : 
                0.0186357f) : 
            -0.035612673f) : 
         (Double.isNaN(data[8]) || data[8 /* pH */] < 3.6999414f ? 
             (Double.isNaN(data[8]) || data[8 /* pH */] < 3.6155715f ? 
                 (data[2 /* citric acid */] < 0.1875f ? 
                     (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 2.5625f ? 
                        0.0063164704f : 
                        -0.0061870725f) : 
                     (data[2 /* citric acid */] < 0.2763672f ? 
                        -0.0057395776f : 
                        0.0010038702f)) : 
                 (data[2 /* citric acid */] < 0.03125f ? 
                    -0.038582142f : 
                    -0.0010994955f)) : 
            0.022384241f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_47_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[9 /* sulphates */] < 0.4645459f ? 
         (data[4 /* chlorides */] < 0.059966795f ? 
            0.0063463603f : 
             (data[4 /* chlorides */] < 0.0724546f ? 
                -0.028313994f : 
                 (Double.isNaN(data[7]) || data[7 /* density */] < 0.99685633f ? 
                     (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 2.1363282f ? 
                        -0.010750155f : 
                        0.0113131f) : 
                    -0.01849379f))) : 
         (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.8571289f ? 
             (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.83265394f ? 
                 (Double.isNaN(data[8]) || data[8 /* pH */] < 3.4742188f ? 
                     (Double.isNaN(data[8]) || data[8 /* pH */] < 3.4627466f ? 
                        6.970021E-4f : 
                        0.025724314f) : 
                     (data[8 /* pH */] < 3.4951477f ? 
                        -0.020915419f : 
                        -0.0014692708f)) : 
                0.023103194f) : 
             (data[0 /* fixed acidity */] < 7.5353518f ? 
                 (Double.isNaN(data[0]) || data[0 /* fixed acidity */] < 6.644017f ? 
                    -0.0017335966f : 
                    -0.05046815f) : 
                 (data[7 /* density */] < 0.99692166f ? 
                    0.021301582f : 
                    -0.011790076f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_48_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[9 /* sulphates */] < 0.57544434f ? 
         (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.5648979f ? 
             (data[4 /* chlorides */] < 0.058816407f ? 
                 (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.54472655f ? 
                     (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.6196875f ? 
                        -0.011677692f : 
                        0.012749836f) : 
                    -0.051049944f) : 
                 (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.55460936f ? 
                     (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.3046875f ? 
                        -0.0038592883f : 
                        0.00603013f) : 
                     (data[5 /* free sulfur dioxide */] < 11.625f ? 
                        -0.0014404814f : 
                        0.023346407f))) : 
             (Double.isNaN(data[2]) || data[2 /* citric acid */] < 0.4509375f ? 
                 (Double.isNaN(data[1]) || data[1 /* volatile acidity */] < 0.6248438f ? 
                     (data[6 /* total sulfur dioxide */] < 44.835938f ? 
                        0.026032148f : 
                        -0.008518711f) : 
                    -0.020229056f) : 
                -0.03524397f)) : 
         (data[6 /* total sulfur dioxide */] < 8.487305f ? 
            -0.023768295f : 
             (data[8 /* pH */] < 2.9855664f ? 
                 (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 2.09375f ? 
                    0.034673482f : 
                    5.960941E-4f) : 
                 (Double.isNaN(data[3]) || data[3 /* residual sugar */] < 2.2054687f ? 
                     (Double.isNaN(data[7]) || data[7 /* density */] < 0.9984205f ? 
                        -5.2393525E-4f : 
                        -0.021287575f) : 
                     (Double.isNaN(data[6]) || data[6 /* total sulfur dioxide */] < 69.9375f ? 
                        0.0077127507f : 
                        -0.008434056f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}


class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_49_class_0.score0(fdata);
  }
}
class gbm_0a1b9c5f_c6b8_4e5c_917e_8c357b00181c_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* residual sugar */] < 1.35625f ? 
        -0.015256869f : 
         (data[7 /* density */] < 0.99282324f ? 
             (data[2 /* citric acid */] < 0.01953125f ? 
                -0.006218791f : 
                0.023941899f) : 
             (data[6 /* total sulfur dioxide */] < 8.2109375f ? 
                -0.016226104f : 
                 (data[1 /* volatile acidity */] < 0.40515625f ? 
                     (Double.isNaN(data[9]) || data[9 /* sulphates */] < 0.7925f ? 
                        4.4519544E-4f : 
                        0.00961586f) : 
                     (Double.isNaN(data[10]) || data[10 /* alcohol */] < 12.86875f ? 
                        -7.361525E-4f : 
                        -0.025310347f)))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


